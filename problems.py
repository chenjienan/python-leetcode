array_basic = [27, 26, 80, 277, 189, 41, 299, 134, 118, 119, 169, 229, 274, 275, 243, 244, 245,
         217, 219, 220, 55, 45, 121, 122, 123, 188, 309, 11, 42, 334, 128, 164, 287, 135, 330]
array_advanced = [4,321,327, 289]
array_interval = [57, 56, 252, 253, 352]
array_counter = [239, 295, 53, 325, 209, 238, 152, 228, 163]
array_sort = [88, 75, 283, 376, 280, 324]

string_basic = [28, 14, 58, 387, 383, 344, 151, 186, 345, 205, 293, 294, 290, 242,
                49, 249, 87, 179, 6, 161, 38, 358, 316, 271, 168, 171, 13, 12, 273, 246, 247, 248]
string_advanced = [68, 65, 157, 158]
string_slidingWindow = [76, 30, 3, 340, 395, 159]
string_palindrome = [125, 266, 5, 9, 214, 336, 131, 132, 267]
string_parentheses = [20, 22, 32, 241, 301]
string_subseq = [392, 115, 187]

math_basic = [7, 165, 66, 8, 258, 67, 43, 29, 69, 50, 367, 365, 204]
math_sum = [1, 167, 15, 16, 259, 18]
math_other = [231, 326, 342, 372, 233, 319, 292, 202, 400,
              263, 264, 306, 172, 343, 396, 390, 386, 357, 360, 397, 368]

tree_basic = [144, 94, 145, 102]
tree_preorder = [100, 101, 226, 257, 112, 113, 129, 298, 111]
tree_postorder = [104, 110, 124, 250, 366, 337]
tree_bfs = [107, 103, 199]
tree_bst = [98, 235, 236, 108, 109, 173, 230, 297, 285, 270, 272, 99]
tree_important = [116, 117, 314, 96]
tree_other = [156, 114, 255, 333, 222, 105, 106, 95, 331]
tree = tree_basic + tree_preorder + tree_postorder + tree_bfs + tree_bst + tree_important + tree_other

backtracking = [78, 90, 77, 39, 40, 216, 377, 254, 46, 47, 31, 60, 291]
backtracking_enum = [17, 320, 93, 282, 140, 351]

dp_1d = [70, 62, 63, 120, 279, 139, 375, 312, 322]
dp_2d = [256, 265, 64, 72, 97, 174, 221, 85, 363]
dp_simplify = [198, 213, 276, 91, 10, 44]
dp = dp_1d + dp_2d + dp_simplify

linkedlist_basic = [206, 141, 24, 328, 92,
                    237, 19, 83, 203, 82, 369, 2, 160, 21]
linkedlist_advanced = [234, 143, 142, 148, 25, 61, 86, 23, 147]

binarySearch = [278, 35, 33, 81, 153, 154,
                162, 374, 34, 349, 350, 315, 300, 354]

matrix = [48, 54, 59, 73, 311, 329, 378, 74,
          240, 370, 79, 296, 361, 317, 302, 36, 37]

dfs_and_bfs = [200, 286, 130, 339, 364, 127, 51, 52, 126]

stack = [155, 232, 225, 150, 71, 388, 394, 224, 227, 385, 84]

priorityQueue = [215, 347, 313, 373, 218, 332, 341]

bit_manipulation = [89, 136, 318, 393, 201,
                    371, 338, 89, 268, 191, 190, 137, 260]

topoSort = [207, 210, 269]

random = [384, 398, 382, 380, 381, 138]

graph = [133, 399, 310, 335, 149, 356, 391, 223]

unionFind = [261, 323, 305]

trie = [211, 208, 212]

design = [359, 346, 362, 281, 284, 251, 288, 170,
          348, 379, 353, 146, 355, 303, 304, 307, 308]


top_250 = [1, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15, 17, 18, 20, 22, 23, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 88, 90, 91, 96, 98, 101, 104, 108, 110, 111, 112, 113, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 130, 133, 134, 138, 139, 140, 142, 146, 149, 150, 152, 153, 154, 155, 157, 158, 161, 162, 163, 168, 171, 173, 186, 174, 188, 189, 191, 198, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212,
           213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 230, 231, 232, 235, 236, 238, 239, 240, 241, 242, 244, 245, 249, 251, 252, 253, 254, 256, 257, 261, 263, 264, 265, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 305, 307, 308, 309, 311, 312, 314, 316, 317, 318, 322, 323, 324, 325, 329, 334, 336, 337, 338, 339, 340, 341, 346, 347, 348, 350, 351, 352, 353, 354, 355, 359, 361, 362, 364, 367, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 389, 394, 398]


ls = []
t_ls = graph
for d in t_ls:
    if d in top_250:
        ls.append(d)
print(ls, len(t_ls), len(ls))


top250_array_basic = [27, 26, 80, 277, 189, 41, 299, 134, 274, 275, 244,
                      245, 217, 219, 220, 55, 45, 121, 122, 123, 188, 309, 11, 42, 334, 128, 287]
top250_string_basic = [28, 186, 205, 293, 294, 290, 242,
                       49, 249, 161, 38, 316, 271, 168, 171, 13, 12, 273]
top250_tree = [101, 226, 257, 112, 113, 298, 111, 104, 110, 124,
               337, 98, 235, 236, 108, 173, 230, 297, 285, 270, 116, 117, 314, 96]
top250_backtracking = [78, 90, 77, 39, 40, 216, 377,
                       254, 46, 47, 31, 60, 291, 17, 282, 140, 351]
top250_linkedlist = [82, 142, 23]
top250_binarySearch = [278, 35, 33, 81, 153, 154, 162, 374, 34, 350, 300, 354]
top250_matrix = [48, 54, 59, 311, 329, 378,
                 74, 240, 79, 296, 361, 317, 302, 36, 37]
top250_dfs_bfs = dfs_and_bfs
top250_stack = [155, 232, 225, 150, 71, 394, 224, 227, 385, 84]
top250_heap = [215, 347, 218, 341]
top250_graph = [133, 149]

# total 141 problems 
top = [top250_array_basic, top250_string_basic, top250_tree, top250_backtracking, top250_linkedlist,
       top250_binarySearch, top250_matrix, top250_dfs_bfs, top250_stack, top250_heap, top250_graph]
